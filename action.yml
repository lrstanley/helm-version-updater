name: "helm-version-updater"
description: "github action for syncing appVersion to docker image tags (and similar)"
branding:
  icon: "arrow-up-right"
  color: "blue"
inputs: # make sure all of these are mirrored as environment variables in steps.
  version:
    description: "Version of helm-version-updater to use (defaults to the same version as the action)"
    default: "v1.0.4"
  output-file:
    description: "Output json file containing change set (- for stdout)"
    default: "-"
  check-dir:
    description: "Directory to recursively check for ci-config.yaml files"
    default: "."
  support-prerelease:
    description: "Support pre-release tags as versions"
    default: "false"
  dry-run:
    description: "Do not write update Chart.yaml files, only output changeset"
    default: "false"
outputs:
  changeset:
    description: "Change set as JSON"
    value: ${{ steps.run.outputs.changeset }}
runs:
  using: "composite"
  steps:
    - name: check-runner-os
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error::this action only supports linux runners at this time"
        exit 1
    - name: helm-version-updater
      id: run
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
        OUTPUT_FILE: ${{ inputs.output-file }}
        CHECK_DIR: ${{ inputs.check-dir }}
        SUPPORT_PRERELEASE: ${{ inputs.support-prerelease }}
      run: |
        if [ "$RUNNER_ARCH" == "ARM64" ]; then
          BINARY_ARCH="arm64"
        elif [ "$RUNNER_ARCH" == "ARM" ]; then
          BINARY_ARCH="arm"
        elif [ "$RUNNER_ARCH" == "X86" ]; then
          BINARY_ARCH="386"
        elif [ "$RUNNER_ARCH" == "X64" ]; then
          BINARY_ARCH="amd64"
        else
          BINARY_ARCH="amd64"
        fi

        if [ "$VERSION" == "latest" ]; then
          DOWNLOAD_URL="https://github.com/lrstanley/helm-version-updater/releases/latest/download/helm-version-updater_linux_${BINARY_ARCH}"
        else
          VERSION="v${VERSION#v}"
          DOWNLOAD_URL="https://github.com/lrstanley/helm-version-updater/releases/download/${VERSION}/helm-version-updater_linux_${BINARY_ARCH}"
        fi

        BINARY="/usr/local/bin/helm-version-updater-${VERSION}"

        curl -sL --output "$BINARY" \
          "$DOWNLOAD_URL"

        chmod +x "$BINARY"
        $BINARY
